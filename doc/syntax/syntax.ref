<!DOCTYPE html>

<html lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8" />
    <title>P Language Syntax</title>
    <link rel="stylesheet" type="text/css" href="../style/style.css" />
</head>

<body>
    <h1>P Language Syntax</h1>

    <h2>
        Identifiers
    </h2>

    <p>
        Identifiers denote variables, parameters, constants, types, functions and procedures.
    </p>

    <img src="../image/identifier.png"/><br/>
    <img src="../image/letter.png"/><br/>
    <img src="../image/digit.png"/><br/>

    <ref file="code/id.p.div"/>

    <h2>
        Numbers
    </h2>

    <img src="../image/hex-digit.png"/><br/>
    <img src="../image/hex-digit-sequence.png"/><br/>
    <img src="../image/digit-sequence.png"/><br/>
    <img src="../image/unsigned-integer.png"/><br/>
    <img src="../image/sign.png"/><br/>
    <img src="../image/unsigned-real.png"/><br/>
    <img src="../image/scale-factor.png"/><br/>
    <img src="../image/unsigned-number.png"/><br/>

    <ref file="code/numbers.p.div"/>

    <h2>
        Strings
    </h2>

    <img src="../image/character-string.png"/><br/>
    <img src="../image/quoted-string.png"/><br/>
    <img src="../image/string-character.png"/><br/>
    <img src="../image/control-string.png"/><br/>

    <ref file="code/strings.p.div"/>

    <h2>
        Comments
    </h2>

    <img src="../image/brace-comment.png"/><br/>
    <img src="../image/paren-comment.png"/><br/>
    <img src="../image/comment.png"/><br/>

    <ref file="code/comments.p.div"/>

    <h2>
        Types
    </h2>

    <img src="../image/type-declaration.png"/><br/>
    <img src="../image/type.png"/><br/>
    <img src="../image/type-name.png"/><br/>
    <img src="../image/type-identifier.png"/><br/>

    <h3>
        Simple types
    </h3>

    <img src="../image/simple-type.png"/><br/>
    <img src="../image/ordinal-type.png"/><br/>
    <img src="../image/subrange-type.png"/><br/>

    <ref file="code/subrange-types.p.div"/>

    <img src="../image/enumerated-type.png"/><br/>

    <ref file="code/enumerated-types.p.div"/>

    <img src="../image/identifier-list.png"/><br/>
    <img src="../image/ordinal-type-name.png"/><br/>

    <p>
        Size of integer type object is 4 bytes. Range of integer type value is from -2,147,483,647 to 2,147,483,647.
    </p>

    <p>
        Size of Boolean type object is 1 byte. Boolean type object can have two values: <span class="kw">true</span> and <span class="kw">false</span>.
    </p>

    <p>
        Size of char type object is 1 byte. Char type value can have ASCII code value from 0 to 255.
    </p>

    <img src="../image/real-type.png"/><br/>

    <p>
        Size of real type object is 4 bytes. Range of real type value is from 1.175494351E-38 to 3.402823466E+38.
    </p>

    <h3>
        String type
    </h3>

    <img src="../image/string-type.png"/><br/>

    <h3>
        Pointer type
    </h3>

    <img src="../image/pointer-type.png"/><br/>

    <h3>
        Object types
    </h3>

    <img src="../image/object-type.png"/><br/>
    <img src="../image/heritage.png"/><br/>
    <img src="../image/component-list.png"/><br/>
    <img src="../image/object-field-list.png"/><br/>
    <img src="../image/method-list.png"/><br/>
    <img src="../image/method-heading.png"/><br/>
    <img src="../image/virtuality.png"/><br/>

    <ref file="code/object-types.p.div"/>

    The following example shows declaring virtual and overridden methods:

    <ref file="code/virtual_shape.p.div"/>

    <h3>
        Array types
    </h3>

    <img src="../image/array-type.png"/><br/>

    <ref file="code/array-types.p.div"/>

    <h2>
        Variables and constants
    </h2>

    <img src="../image/variable-declaration.png"/><br/>

    <ref file="code/variables.p.div"/>

    <img src="../image/constant-declaration.png"/><br/>
    <img src="../image/constant.png"/><br/>
    <img src="../image/array-constant.png"/><br/>
    <img src="../image/object-constant.png"/><br/>

    <ref file="code/constants.p.div"/>

    <h2>
        Expressions
    </h2>

    <h3>
        Primary expressions
    </h3>

    <img src="../image/primary.png"/><br/>
    <img src="../image/variable-reference.png"/><br/>
    <img src="../image/variable-identifier.png"/><br/>
    <img src="../image/variable-typecast.png"/><br/>
    <img src="../image/unsigned-constant.png"/><br/>
    <img src="../image/constant-identifier.png"/><br/>
    <img src="../image/function-identifier.png"/><br/>
    <img src="../image/value-typecast.png"/><br/>
    <img src="../image/new-expression.png"/><br/>
    <img src="../image/field-identifier.png"/><br/>
    <img src="../image/method-identifier.png"/><br/>

    <ref file="code/primary-expr.p.div"/>

    <h3>
        Factors
    </h3>

    <img src="../image/factor.png"/><br/>
    <img src="../image/qualifier.png"/><br/>
    <img src="../image/index.png"/><br/>
    <img src="../image/member-selection.png"/><br/>
    <img src="../image/argument-list.png"/><br/>
    <img src="../image/argument.png"/><br/>

    <ref file="code/factors.p.div"/>

    <h3>
        Terms
    </h3>

    <img src="../image/term.png"/><br/>
    <img src="../image/strong-operator.png"/><br/>

    <ref file="code/terms.p.div"/>

    <h3>
        Simple expressions
    </h3>

    <img src="../image/simple-expression.png"/><br/>
    <img src="../image/weak-operator.png"/><br/>

    <ref file="code/simple-expressions.p.div"/>

    <h3>
        Relational expressions
    </h3>

    <img src="../image/expression.png"/><br/>
    <img src="../image/relational-operator.png"/><br/>

    <p>
        Integers, reals and strings can be compared with all six relational operators.
        Booleans and characters only with equality and inequality operators.
        Using the Ord-function however the ordinal values of Booleans and characters can be compared with all relational operators.
    </p>

    <ref file="code/relational-expressions.p.div"/>

    <ref file="code/expressions.p.div"/>

    <h3>
        Constant expressions
    </h3>

    <img src="../image/constant-expression.png"/><br/>
    
    <p>
        Constant expression is syntactically an expression.
        Besides arithmetic operators, the following standard functions can be used in constant expressions:
        Abs, Chr, Ord, Pred and Succ.
    </p>

    <ref file="code/constant-expressions.p.div"/>

    <h2>
        Statements
    </h2>

    <img src="../image/statement.png"/><br/>

    <h3>
        Simple statements
    </h3>

    <img src="../image/simple-statement.png"/><br/>
    <img src="../image/assignment-statement.png"/><br/>
    <img src="../image/procedure-statement.png"/><br/>
    <img src="../image/procedure-identifier.png"/><br/>

    <ref file="code/simple-statements.p.div"/>

    <h3>
        Structured statements
    </h3>

    <img src="../image/structured-statement.png"/><br/>

    <h4>
        Compound statement
    </h4>

    <img src="../image/compound-statement.png"/><br/>

    <ref file="code/compound-statements.p.div"/>

    <h4>
        Conditional statements
    </h4>

    <img src="../image/conditional-statement.png"/><br/>

    <h5>
        If statement
    </h5>    

    <img src="../image/if-statement.png"/><br/>

    <ref file="code/if-statements.p.div"/>

    <h5>
        Case statement
    </h5>    

    <img src="../image/case-statement.png"/><br/>
    <img src="../image/case.png"/><br/>
    <img src="../image/constant-range.png"/><br/>
    <img src="../image/else-part.png"/><br/>

    <ref file="code/case-statements.p.div"/>

    <h4>
        Repetitive statements
    </h4>

    <img src="../image/repetitive-statement.png"/><br/>

    <h5>
        Repeat statement
    </h5>    

    <img src="../image/repeat-statement.png"/><br/>

    <ref file="code/repeat-statements.p.div"/>

    <h5>
        While statement
    </h5>    

    <img src="../image/while-statement.png"/><br/>

    <ref file="code/while-statements.p.div"/>

    <h5>
        For statement
    </h5>    
        
    <img src="../image/for-statement.png"/><br/>
    <img src="../image/control-variable.png"/><br/>
    <img src="../image/initial-value.png"/><br/>
    <img src="../image/final-value.png"/><br/>
    <img src="../image/direction.png"/><br/>

    <p>
        The initial value and final value expressions are evaluated before entering the loop, so 
        changing them inside the loop body has no effect to the number of times the loop is executed.
    </p>

    <ref file="code/for-statements.p.div"/>

    <h2>
        Blocks
    </h2>

    <img src="../image/block.png"/><br/>
    <img src="../image/declaration-part.png"/><br/>
    <img src="../image/constant-declaration-part.png"/><br/>
    <img src="../image/type-declaration-part.png"/><br/>
    <img src="../image/variable-declaration-part.png"/><br/>
    <img src="../image/subroutine-declaration-part.png"/><br/>
    <img src="../image/statement-part.png"/><br/>

    <ref file="code/block.p.div"/>

    <img src="../image/subroutine-block.png"/><br/>

    <ref file="code/forward.p.div"/>

    <p>
        The following example shows how blocks may be nested and inner block may use variables of the outer block:
    </p>

    <ref file="code/scopes.p.div"/>

    <h4>
        Procedure declarations
    </h4>

    <img src="../image/procedure-declaration.png"/><br/>
    <img src="../image/procedure-heading.png"/><br/>
    <img src="../image/procedure-name.png"/><br/>

    <p>
        Procedures cannot be overloaded so the name of a procedure in a procedure definition must be unique within a program.
    </p>

    <img src="../image/parameter-list.png"/><br/>
    <img src="../image/parameter-declaration.png"/><br/>
    <img src="../image/parameter-qualifier.png"/><br/>

    <p>
        If the parameter qualifier is empty the corresponding actual parameter is passed by value.
        If the parameter qualifier is <span class="kw">var</span> the actual parameter is passed by reference.
        If the parameter qualifier is <span class="kw">const</span> the actual parameter is passed by value and you may not assign a new value to it.
    </p>

    <ref file="code/var-params.p.div"/>

    <h4>
        Function declarations
    </h4>

    <img src="../image/function-declaration.png"/><br/>
    <img src="../image/function-heading.png"/><br/>
    <img src="../image/function-name.png"/><br/>

    <p>
        Functions cannot be overloaded so the name of a function in a function definition must be unique within a program. 
    </p>

    <img src="../image/result-type.png"/><br/>

    <p>
        A function should contain at least one assignment statement that assigns a value 
        to the function result variable that has the same name as the function.
        There might be more than one executed function result assignment in which case the 
        last such assignment stays valid.
    </p>

    <ref file="code/func.p.div"/>
    
    <h4>
        Constructor declarations
    </h4>

    <img src="../image/constructor-declaration.png"/><br/>
    <img src="../image/constructor-heading.png"/><br/>
    <img src="../image/object-name.png"/><br/>

    <p>
        Constructors can be overloaded, so there may be multiple constructors with different parameter types in the same object type.
    </p>

    <img src="../image/constructor-call.png"/><br/>

    <p>
        The <span class="kw">base</span> constructor call calls the constructor of the base object type.
        The <span class="kw">this</span> constructor call calls another constructor of the same object type.
    </p>

    <ref file="code/constructors.p.div"/>

    <h2>
        Programs and units
    </h2>

    <img src="../image/program.png"/><br/>
    <img src="../image/program-heading.png"/><br/>
    <img src="../image/program-id.png"/><br/>

    <p>
        The <em>program-id</em> specifies the name of the program and 
        sets the file name of the generated .pcode file.
    </p>

    <img src="../image/program-parameter-list.png"/><br/>

    <p>
        The <em>program-parameter-list</em> is ignored by the compiler.
    </p>

    <img src="../image/uses-clause.png"/><br/>

    <img src="../image/unit-name.png"/><br/>

    <p>
        The uses clause specifies units used by a program or interface or implementation part of a unit.
        The <em>System</em> unit is automatically used by all programs and units.
    </p>

    <ref file="code/program.p.div"/>

    <h3>
        Units
    </h3>

    <img src="../image/unit.png"/><br/>
    <img src="../image/unit-heading.png"/><br/>

    <p>
        The <em>unit-name</em> in the unit heading specifies the name of the unit and sets
        the file name of the generated .pcode file.
    </p>

    <h4>
        Interface part
    </h4>

    <img src="../image/interface-part.png"/><br/>
    <img src="../image/procedure-and-function-heading-part.png"/><br/>

    <h4>
        Implementation part
    </h4>

    <img src="../image/implementation-part.png"/><br/>

    <h4>
        Initialization part
    </h4>

    <img src="../image/initialization-part.png"/><br/>

    <p>
        The initialization parts of the units a program uses are run before the statement part of the program starts executing.
    </p>

    <ref file="code/unit.p.div"/>
</body>
</html>
